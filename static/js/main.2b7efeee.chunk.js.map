{"version":3,"sources":["components/DisplayPokemon.js","components/buttons/HeightBtn.js","components/buttons/WeightBtn.js","components/buttons/TypeButtonsMap.js","App.js","index.js"],"names":["DisplayPokemon","pokeObj","num","name","type","weaknesses","src","img","alt","HeightBtn","mapHeight","onClick","console","log","lessThanOne","Math","min","Button","variant","betweenOneAndThree","some","v","overThree","max","Stack","spacing","direction","justifyContent","alignItems","WeightBtn","mapWeight","lessThanFive","betweenFiveAndTwentyFive","overTwentyFive","TypeButtonsMap","uniqueWeaknessArray","mapButtons","sort","map","App","useState","PokemonLibrary","pokemon","pokemonData","setPokemonData","setType","weakness","setWeakness","height","setHeight","weight","setWeight","reset","prevPokeArray","length","id","mapWeaknesses","flatMap","Set","a","b","className","color","style","fontSize","typeButtonInput","filter","pokeType","includes","minHeight","maxHeight","minWeight","maxWeight","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b7efeee.chunk.js","sourcesContent":["export default function DisplayPokemon({ pokeObj }) {\r\n  return (\r\n    <div>\r\n      #{pokeObj.num} | {pokeObj.name} | {pokeObj.type[0]} {pokeObj.type[1]} |\r\n      Weaknesses - {pokeObj.weaknesses}\r\n      {/* added weaknesses here temporarily just to help narrow it down */}\r\n      <img src={pokeObj.img} alt=\"Pokemon Images\"></img>\r\n    </div>\r\n  );\r\n}\r\n","import { Button } from \"@mui/material\";\r\nimport Stack from \"@mui/material/Stack\";\r\n\r\nexport default function HeightBtn({ mapHeight, onClick }) {\r\n  console.log(mapHeight);\r\n  //pokemon less than 1m\r\n  const lessThanOne =\r\n    Math.min(...mapHeight) <= 1 ? (\r\n      <Button variant=\"contained\" onClick={() => onClick(0, 1)}>\r\n        Small\r\n      </Button>\r\n    ) : null;\r\n\r\n  //pokemon between 1m and 3m\r\n  const betweenOneAndThree = mapHeight.some((v) => v >= 1 && v <= 3) ? (\r\n    <Button variant=\"contained\" onClick={() => onClick(1, 3)}>\r\n      Medium\r\n    </Button>\r\n  ) : null;\r\n\r\n  //pokemon over 3m\r\n  const overThree =\r\n    Math.max(...mapHeight) >= 3 ? (\r\n      <Button variant=\"contained\" onClick={() => onClick(3, 10)}>\r\n        Big\r\n      </Button>\r\n    ) : null;\r\n\r\n  return (\r\n    <div>\r\n      <Stack\r\n        spacing={2}\r\n        direction=\"row\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n      >\r\n        {lessThanOne}\r\n        {betweenOneAndThree}\r\n        {overThree}\r\n      </Stack>\r\n    </div>\r\n  );\r\n}\r\n","import { Button } from \"@mui/material\";\r\nimport Stack from \"@mui/material/Stack\";\r\n\r\nexport default function WeightBtn({ mapWeight, onClick }) {\r\n  console.log(mapWeight);\r\n  //pokemon less than 5kg\r\n  const lessThanFive =\r\n    Math.min(...mapWeight) <= 5 ? ( //is the max number less than 5? if true, show the button\r\n      <Button variant=\"contained\" onClick={() => onClick(0, 5)}>\r\n       Light\r\n      </Button>\r\n    ) : null;\r\n\r\n  //pokemon between 5kg and 25kg\r\n  const betweenFiveAndTwentyFive = mapWeight.some((v) => v > 5 && v < 25) ? ( // as long as 1 number is between 5 and 25, show this button\r\n    <Button variant=\"contained\" onClick={() => onClick(5, 25)}>\r\n      Medium\r\n    </Button>\r\n  ) : null;\r\n\r\n  const overTwentyFive =\r\n    Math.max(...mapWeight) > 25 ? (\r\n      <Button variant=\"contained\" onClick={() => onClick(25, 500)}>\r\n        Heavy\r\n      </Button>\r\n    ) : null;\r\n\r\n  // can I further reduce this? Can I go to the function and do math.max/min over there and bring those two values here go show buttons?\r\n  // I could make this range checker its  own function and just pass values?\r\n  return (\r\n    <div>\r\n      <Stack\r\n        spacing={2}\r\n        direction=\"row\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n      >\r\n        {lessThanFive}\r\n        {betweenFiveAndTwentyFive}\r\n        {overTwentyFive}\r\n      </Stack>\r\n    </div>\r\n  );\r\n}\r\n\r\n/* \r\ncant get flareon, 25.0 kg what about a pokemon who is like 25.2kg? I can't start the count at 26.\r\n\r\n\r\n\r\nLogging mapWeight will not log until this component is rendered in the questions! \r\n\r\nMake the range checker into func?\r\nfunction between(x, min, max) {\r\n  return x >= min && x <= max;\r\n}\r\n// ...\r\nif (between(x, 0.001, 0.009)) {\r\n  // something\r\n}\r\n*/\r\n","import { Button } from \"@mui/material\";\r\nimport Stack from \"@mui/material/Stack\";\r\n\r\nexport default function TypeButtonsMap({ uniqueWeaknessArray, onClick }) {\r\n  const mapButtons = uniqueWeaknessArray.sort().map((type) => (\r\n    <Button key={type} variant=\"contained\" onClick={() => onClick(type)}>\r\n      {type}\r\n    </Button>\r\n  ));\r\n  return (\r\n    <div>\r\n      <Stack\r\n        spacing={2}\r\n        direction=\"row\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n      >\r\n        {mapButtons}\r\n      </Stack>\r\n    </div>\r\n  );\r\n}\r\n\r\n/* \r\nSort then map allows the buttons to always be alphabetical\r\n*/\r\n","import React, { useState } from \"react\";\r\nimport DisplayPokemon from \"./components/DisplayPokemon\";\r\nimport \"./App.css\";\r\nimport { Button } from \"@mui/material\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport PokemonLibrary from \"./data/PokemonList.json\";\r\nimport HeightBtn from \"./components/buttons/HeightBtn\";\r\nimport WeightBtn from \"./components/buttons/WeightBtn\";\r\nimport TypeButtonsMap from \"./components/buttons/TypeButtonsMap\";\r\n\r\nexport default function App() {\r\n  const [pokemonData, setPokemonData] = useState(PokemonLibrary.pokemon); //The giant array of pokemon with pokemon nested in individual obj\r\n  // const [history, setHistory] = useState([Array(4).fill(null)]); //4 for 4 questions. Will need up increase this number if add more questions. Holds our choices?\r\n  // const [stepNumber, setStepNumber] = useState(0); // will show question state buttons\r\n  const [type, setType] = useState(null);\r\n  const [weakness, setWeakness] = useState(null);\r\n  const [height, setHeight] = useState(null);\r\n  const [weight, setWeight] = useState(null);\r\n\r\n  // assigns type of pokemon\r\n  const typeAssign = (typeButtonInput) => {\r\n    setType(typeButtonInput);\r\n    setPokemonData((prevPokeArray) =>\r\n      prevPokeArray.filter((pokeType) => {\r\n        return pokeType.type.includes(`${typeButtonInput}`);\r\n      })\r\n    );\r\n  };\r\n  // assigns weakness of pokemon\r\n  const weaknessAssign = (typeButtonInput) => {\r\n    setWeakness(typeButtonInput);\r\n    setPokemonData((prevPokeArray) =>\r\n      prevPokeArray.filter((pokeType) => {\r\n        return pokeType.weaknesses.includes(`${typeButtonInput}`);\r\n      })\r\n    );\r\n  };\r\n\r\n  // assigns height of pokemon\r\n  const heightAssign = (minHeight, maxHeight) => {\r\n    setHeight(maxHeight);\r\n    setPokemonData((prevPokeArray) =>\r\n      prevPokeArray.filter((pokeType) => {\r\n        return (\r\n          pokeType.height >= `${minHeight}` && pokeType.height <= `${maxHeight}`\r\n        );\r\n      })\r\n    );\r\n  };\r\n  // assigns weight of pokemon\r\n  const weightAssign = (minWeight, maxWeight) => {\r\n    setWeight(maxWeight);\r\n    setPokemonData((prevPokeArray) =>\r\n      prevPokeArray.filter((pokeType) => {\r\n        return (\r\n          pokeType.weight >= `${minWeight}` && pokeType.weight <= `${maxWeight}`\r\n        );\r\n      })\r\n    );\r\n  };\r\n\r\n  /*   const jumpTo = (step) => {\r\n    setStepNumber(step);\r\n    setPokemonData();\r\n  };\r\n  const renderChoices = () =>\r\n    history.map((_step, move) => {\r\n      const destination = move ? `Go to move #${move}` : \"Go to Start\";\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => jumpTo(move)}>{destination}</button>\r\n        </li>\r\n      );\r\n    });\r\n */\r\n  //   const canEvolveAssign = () => {\r\n  //   setWeight(maxWeight);\r\n  //   setPokemonData((prevPokeArray) =>\r\n  //     prevPokeArray.filter((pokeType) => {\r\n  //       return (\r\n  //         pokeType.weight > `${minWeight}` && pokeType.weight < `${maxWeight}`\r\n  //       );\r\n  //     })\r\n  //   );\r\n  // };\r\n\r\n  //Reset ALL data in states\r\n  function reset() {\r\n    setPokemonData((prevPokeArray) => (prevPokeArray = PokemonLibrary.pokemon));\r\n    setType(null);\r\n    setWeakness(null);\r\n    setHeight(null);\r\n    setWeight(null);\r\n    //would need to include all other states that we declared\r\n  }\r\n\r\n  //Error message and my terrible button. Should be able to delete!\r\n  // if (pokemonData.length <= 0) {\r\n  //   return (\r\n  //     <div>\r\n  //       <Button onClick={reset}>There's no more Pokemon! Try again!</Button>\r\n  //     </div>\r\n  //   );\r\n  // }\r\n\r\n  // if only one pokemon is left in the array, just return that pokemon\r\n  if (pokemonData.length === 1) {\r\n    return (\r\n      <div>\r\n        <Stack\r\n          spacing={2}\r\n          direction=\"row\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Button variant=\"contained\" onClick={reset}>\r\n            Here's your pokemon\r\n          </Button>\r\n          {pokemonData.map((pokeObj) => (\r\n            <DisplayPokemon key={pokeObj.id} pokeObj={pokeObj} />\r\n          ))}\r\n        </Stack>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //Logging pokemon array each render\r\n  console.log(pokemonData);\r\n\r\n  // Logs all weaknesses\r\n  const mapWeaknesses = pokemonData.flatMap((pokeObj) => pokeObj.weaknesses);\r\n  const uniqueWeaknessArray = [...new Set(mapWeaknesses)];\r\n\r\n  //Get all weight and height of all pokemon, sort, and pass variable to weightBtn/heightBtn. If weight/height is within ranges, show button.\r\n  const mapWeight = pokemonData\r\n    .map((pokeObj) => pokeObj.weight)\r\n    .sort((a, b) => a - b);\r\n  const mapHeight = pokemonData\r\n    .map((pokeObj) => pokeObj.height)\r\n    .sort((a, b) => a - b); //do i need to sort at all?\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Pokemon Selector!</h1>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"error\"\r\n        className=\"resetBtn\"\r\n        onClick={reset}\r\n      >\r\n        Reset\r\n      </Button>\r\n      {/* if type hasn't been chosen, show this question - logic is the same for other questions */}\r\n      {!type && (\r\n        <div style={{ fontSize: 50 }}>\r\n          <strong> Select Type</strong>{\" \"}\r\n          <TypeButtonsMap\r\n            uniqueWeaknessArray={uniqueWeaknessArray}\r\n            onClick={typeAssign}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      {type && !weakness && (\r\n        <div style={{ fontSize: 50 }}>\r\n          <strong>Select Weakness</strong>\r\n          <TypeButtonsMap\r\n            uniqueWeaknessArray={uniqueWeaknessArray}\r\n            onClick={weaknessAssign}\r\n          />\r\n        </div>\r\n      )}\r\n      {type && weakness && !height && (\r\n        <div style={{ fontSize: 50 }}>\r\n          <strong>Select Height</strong>\r\n          <HeightBtn mapHeight={mapHeight} onClick={heightAssign} />\r\n        </div>\r\n      )}\r\n      {type && weakness && height && !weight && (\r\n        <div style={{ fontSize: 50 }}>\r\n          <strong>Select Weight</strong>\r\n          <WeightBtn mapWeight={mapWeight} onClick={weightAssign} />\r\n        </div>\r\n      )}\r\n      {type && weakness && height && weight && (\r\n        <div style={{ fontSize: 55 }}>\r\n          <strong>Here is your Pokemon!</strong>\r\n        </div>\r\n      )}\r\n      <div className=\"displayPokemon\">\r\n        {pokemonData.map((pokeObj) => (\r\n          <DisplayPokemon key={pokeObj.id} pokeObj={pokeObj} />\r\n        ))}\r\n\r\n        {/* <h3>History</h3>\r\n        {renderChoices()} */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n/* \r\nMove questions into app.js for now? \r\n\r\n        {pokemonMapper().map((pokeObj) => (\r\n          <DisplayPokemon pokeObj={pokeObj} />\r\n        ))}\r\n\r\n*/\r\n\r\n// function pokemonMapper() {\r\n//   //Set to base data\r\n//   //check each flag\r\n//   let newPokemonArray = pokemonData;\r\n//   if (flyingFilter) {\r\n//     newPokemonArray = newPokemonArray.filter((f) => {\r\n//       if (f.type.includes(\"flying\")) {\r\n//         return true;\r\n//       }\r\n//     });\r\n//   }\r\n//   if (fireFilter) {\r\n//     newPokemonArray = newPokemonArray.filter((f) => {\r\n//       if (f.type.includes(\"fire\")) {\r\n//         return true;\r\n//       }\r\n//     });\r\n//   }\r\n\r\n//   return newPokemonArray;\r\n// }\r\n\r\n/* \r\n\r\nFor weight and height. We need to say \r\nif no pokemon are under 1m or over 3m, then don't show those buttons?\r\n*/\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./App.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}