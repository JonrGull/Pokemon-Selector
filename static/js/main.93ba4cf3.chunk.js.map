{"version":3,"sources":["components/DisplayPokemon.js","components/buttons/HeightBtn.js","components/buttons/WeightBtn.js","components/buttons/TypeButtonsMap.js","components/buttons/EvolveBtn.js","App.js","index.js"],"names":["DisplayPokemon","pokeObj","Card","sx","minWidth","m","CardContent","Typography","variant","component","num","name","type","src","img","alt","HeightBtn","mapHeight","onClick","lessThanOne","Math","min","Button","betweenOneAndThree","some","v","overThree","max","WeightBtn","mapWeight","lessThanFive","betweenFiveAndTwentyFive","overTwentyFive","TypeButtonsMap","uniqueWeaknessArray","mapButtons","sort","map","EvolveBtn","mapEvolutions","canEvolve","cannotEvolve","App","useState","PokemonLibrary","pokemon","pokemonData","setPokemonData","setType","weakness","setWeakness","evolve","setEvolve","height","setHeight","weight","setWeight","reset","prevPokeArray","mapWeaknesses","flatMap","weaknesses","Set","a","b","Array","isArray","prev_evolution","next_evolution","length","Stack","id","className","color","style","fontSize","typeButtonInput","filter","includes","minHeight","maxHeight","minWeight","maxWeight","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.93ba4cf3.chunk.js","sourcesContent":["import Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nexport default function DisplayPokemon({ pokeObj }) {\r\n  return (\r\n    <Card sx={{ minWidth: 400, m: 1 }}>\r\n      <CardContent>\r\n        <Typography variant=\"h5\" component=\"div\">\r\n          #{pokeObj.num} {pokeObj.name} | {pokeObj.type[0]} {pokeObj.type[1]}\r\n        </Typography>\r\n        <img src={pokeObj.img} alt=\"Pokemon Images\"></img>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","import { Button } from \"@mui/material\";\r\n// import Stack from \"@mui/material/Stack\";\r\n\r\nexport default function HeightBtn({ mapHeight, onClick }) {\r\n  // console.log(mapHeight);\r\n  //pokemon less than 1m\r\n  const lessThanOne =\r\n    Math.min(...mapHeight) <= 1 ? (\r\n      <Button variant=\"contained\" onClick={() => onClick(0, 1)}>\r\n        Small\r\n      </Button>\r\n    ) : null;\r\n\r\n  //pokemon between 1m and 3m\r\n  const betweenOneAndThree = mapHeight.some((v) => v >= 1 && v <= 3) ? (\r\n    <Button variant=\"contained\" onClick={() => onClick(1, 3)}>\r\n      Medium\r\n    </Button>\r\n  ) : null;\r\n\r\n  //pokemon over 3m\r\n  const overThree =\r\n    Math.max(...mapHeight) >= 3 ? (\r\n      <Button variant=\"contained\" onClick={() => onClick(3, 10)}>\r\n        Big\r\n      </Button>\r\n    ) : null;\r\n\r\n  return (\r\n    <div>\r\n      {lessThanOne}\r\n      {betweenOneAndThree}\r\n      {overThree}\r\n    </div>\r\n  );\r\n}\r\n","import { Button } from \"@mui/material\";\r\n// import Stack from \"@mui/material/Stack\";\r\n\r\nexport default function WeightBtn({ mapWeight, onClick }) {\r\n  // console.log(mapWeight);\r\n  //pokemon less than 5kg\r\n  const lessThanFive =\r\n    Math.min(...mapWeight) <= 5 ? ( //is the max number less than 5? if true, show the button\r\n      <Button variant=\"contained\" onClick={() => onClick(0, 5)}>\r\n        Light\r\n      </Button>\r\n    ) : null;\r\n\r\n  //pokemon between 5kg and 25kg\r\n  const betweenFiveAndTwentyFive = mapWeight.some((v) => v > 5 && v < 25) ? ( // as long as 1 number is between 5 and 25, show this button\r\n    <Button variant=\"contained\" onClick={() => onClick(5, 25)}>\r\n      Medium\r\n    </Button>\r\n  ) : null;\r\n\r\n  const overTwentyFive =\r\n    Math.max(...mapWeight) > 25 ? (\r\n      <Button variant=\"contained\" onClick={() => onClick(25, 500)}>\r\n        Heavy\r\n      </Button>\r\n    ) : null;\r\n\r\n  // can I further reduce this? Can I go to the function and do math.max/min over there and bring those two values here go show buttons?\r\n  // I could make this range checker its  own function and just pass values?\r\n  return (\r\n    <div>\r\n\r\n        {lessThanFive}\r\n        {betweenFiveAndTwentyFive}\r\n        {overTwentyFive}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n/* \r\ncant get flareon, 25.0 kg what about a pokemon who is like 25.2kg? I can't start the count at 26.\r\n\r\n\r\n\r\nLogging mapWeight will not log until this component is rendered in the questions! \r\n\r\nMake the range checker into func?\r\nfunction between(x, min, max) {\r\n  return x >= min && x <= max;\r\n}\r\n// ...\r\nif (between(x, 0.001, 0.009)) {\r\n  // something\r\n}\r\n*/\r\n","import { Button } from \"@mui/material\";\r\n// import Stack from \"@mui/material/Stack\";\r\n\r\nexport default function TypeButtonsMap({ uniqueWeaknessArray, onClick }) {\r\n  const mapButtons = uniqueWeaknessArray.sort().map((type) => (\r\n    <Button key={type} variant=\"contained\" onClick={() => onClick(type)}>\r\n      {type}\r\n    </Button>\r\n  ));\r\n  return <div>{mapButtons}</div>;\r\n}\r\n\r\n/* \r\nIf I want to change the buttons to have Japanese text, could I do something with the replace method?\r\n\r\nSorting then mapping allows the buttons to always be alphabetical\r\n*/\r\n","import { Button } from \"@mui/material\";\r\n// import Stack from \"@mui/material/Stack\";\r\n\r\nexport default function EvolveBtn({ mapEvolutions, onClick }) {\r\n  //.some() is used to show both buttons if mapEvolutions has a mix of true and false.\r\n\r\n  //pokemon that has a property prev_evolution or next_evolution\r\n  const canEvolve = mapEvolutions.some((v) => v === true) ? (\r\n    <Button variant=\"contained\" onClick={() => onClick(true)}>\r\n      Yes\r\n    </Button>\r\n  ) : null;\r\n\r\n  //pokemon that do not have the property\r\n  const cannotEvolve = mapEvolutions.some((v) => v === false) ? (\r\n    <Button variant=\"contained\" onClick={() => onClick(false)}>\r\n      No\r\n    </Button>\r\n  ) : null;\r\n\r\n  return (\r\n    <div>\r\n      {canEvolve}\r\n      {cannotEvolve}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport DisplayPokemon from \"./components/DisplayPokemon\";\r\nimport \"./App.css\";\r\nimport { Button } from \"@mui/material\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport { styled } from \"@mui/styles\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport PokemonLibrary from \"./data/PokemonList.json\";\r\nimport HeightBtn from \"./components/buttons/HeightBtn\";\r\nimport WeightBtn from \"./components/buttons/WeightBtn\";\r\nimport TypeButtonsMap from \"./components/buttons/TypeButtonsMap\";\r\nimport EvolveBtn from \"./components/buttons/EvolveBtn\";\r\n\r\nexport default function App() {\r\n  const [pokemonData, setPokemonData] = useState(PokemonLibrary.pokemon); //The giant array of pokemon with pokemon nested in individual obj\r\n  // const [history, setHistory] = useState([Array(5).fill(null)]); //5 for 5 questions. Will need up increase this number if add more questions. Holds our states?\r\n  // const [stepNumber, setStepNumber] = useState(0); // will show question state buttons\r\n  const [type, setType] = useState(null);\r\n  const [weakness, setWeakness] = useState(null);\r\n  const [evolve, setEvolve] = useState(null); // so null is inherently FALSE, so technically this will always be false. Which is why true works.\r\n  const [height, setHeight] = useState(null);\r\n  const [weight, setWeight] = useState(null);\r\n\r\n  // const useStyles = makeStyles({\r\n  //   root: {\r\n  //     spacing: 2,\r\n  //     direction: \"row\",\r\n  //     justifyContent: \"center\",\r\n  //     alignItems: \"center\",\r\n  //   },\r\n  // });\r\n  // const classes = useStyles();\r\n\r\n  //#region Questions\r\n  /* QUESTION FUNCTIONS */\r\n\r\n  // assigns type of pokemon\r\n  const typeAssign = (typeButtonInput) => {\r\n    setType(typeButtonInput);\r\n    setPokemonData((prevPokeArray) =>\r\n      prevPokeArray.filter((pokemon) => {\r\n        return pokemon.type.includes(`${typeButtonInput}`);\r\n      })\r\n    );\r\n  };\r\n\r\n  // assigns weakness of pokemon\r\n  const weaknessAssign = (typeButtonInput) => {\r\n    setWeakness(typeButtonInput);\r\n    setPokemonData((prevPokeArray) =>\r\n      prevPokeArray.filter((pokemon) => {\r\n        return pokemon.weaknesses.includes(`${typeButtonInput}`);\r\n      })\r\n    );\r\n  };\r\n\r\n  // assigns true or false upon asking if pokemon can evolve\r\n  const evolveAssign = (canEvolve) => {\r\n    setEvolve(canEvolve); // is it okay if this is a boolean with using !evolve?\r\n    setPokemonData((prevPokeArray) =>\r\n      prevPokeArray.filter((pokemon) => {\r\n        if (canEvolve) {\r\n          return pokemon.prev_evolution || pokemon.next_evolution;\r\n        } else {\r\n          return !pokemon.prev_evolution && !pokemon.next_evolution;\r\n        }\r\n      })\r\n    );\r\n  };\r\n  // assigns height of pokemon\r\n  const heightAssign = (minHeight, maxHeight) => {\r\n    setHeight(maxHeight);\r\n    setPokemonData((prevPokeArray) =>\r\n      prevPokeArray.filter((pokemon) => {\r\n        return (\r\n          pokemon.height >= `${minHeight}` && pokemon.height <= `${maxHeight}`\r\n        );\r\n      })\r\n    );\r\n  };\r\n\r\n  // assigns weight of pokemon\r\n  const weightAssign = (minWeight, maxWeight) => {\r\n    setWeight(maxWeight);\r\n    setPokemonData((prevPokeArray) =>\r\n      prevPokeArray.filter((pokemon) => {\r\n        return (\r\n          pokemon.weight >= `${minWeight}` && pokemon.weight <= `${maxWeight}`\r\n        );\r\n      })\r\n    );\r\n  };\r\n  //#endregion\r\n\r\n  //Reset ALL data in states\r\n  function reset() {\r\n    setPokemonData((prevPokeArray) => (prevPokeArray = PokemonLibrary.pokemon));\r\n    setType(null);\r\n    setWeakness(null);\r\n    setEvolve(null);\r\n    setHeight(null);\r\n    setWeight(null);\r\n\r\n    //would need to include all other states that we declared\r\n  }\r\n\r\n  // const jumpTo = (step) => {\r\n  //   setPokemonData(PokemonLibrary.pokemon);\r\n  //   setStepNumber(step);\r\n  //   setType(null);\r\n  //   setWeakness(null);\r\n  //   setEvolve(null);\r\n  //   setHeight(null);\r\n  //   setWeight(null);\r\n  // };\r\n\r\n  // const renderChoices = () =>\r\n  //   history.map((_step, move) => {\r\n  //     const destination = move ? `Go to move #${move}` : \"Go to Start\";\r\n  //     return (\r\n  //       <li key={move}>\r\n  //         <button onClick={() => jumpTo(move)}>{destination}</button>\r\n  //       </li>\r\n  //     );\r\n  //   });\r\n\r\n  //ERROR message and my terrible button. Should be able to delete soon!\r\n  // if (pokemonData.length <= 0) {\r\n  //   return (\r\n  //     <div>\r\n  //       <Button onClick={reset}>There's no more Pokemon! Try again!</Button>\r\n  //     </div>\r\n  //   );\r\n  // }\r\n\r\n  /* CHILD COMPONENT VARIABLES */\r\n\r\n  // Logs all weaknesses to pass to Btn components\r\n  const mapWeaknesses = pokemonData.flatMap((pokeObj) => pokeObj.weaknesses);\r\n  const uniqueWeaknessArray = [...new Set(mapWeaknesses)];\r\n\r\n  //Get all weight and height of all pokemon, sort, and pass variable to weightBtn/heightBtn. If weight/height is within ranges, show button.\r\n  const mapWeight = pokemonData\r\n    .map((pokeObj) => pokeObj.weight)\r\n    .sort((a, b) => a - b);\r\n  const mapHeight = pokemonData\r\n    .map((pokeObj) => pokeObj.height)\r\n    .sort((a, b) => a - b);\r\n\r\n  // Passes to child component to display Yes/No buttons which display if btns are displayed\r\n  const mapEvolutions = pokemonData.map(\r\n    (pokeObj) =>\r\n      Array.isArray(pokeObj.prev_evolution) ||\r\n      Array.isArray(pokeObj.next_evolution)\r\n  );\r\n  // console.log(mapEvolutions);\r\n\r\n  // If only one pokemon is left in the array, just return that pokemon\r\n  if (pokemonData.length === 1) {\r\n    return (\r\n      <div>\r\n        <Stack>\r\n          <Button variant=\"contained\" onClick={reset}>\r\n            Here's your pokemon\r\n          </Button>\r\n          {pokemonData.map((pokeObj) => (\r\n            <DisplayPokemon key={pokeObj.id} pokeObj={pokeObj} />\r\n          ))}\r\n        </Stack>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //Logging pokemon array each render\r\n  // console.log(pokemonData);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Pokemon Selector!</h1>\r\n      <Button variant=\"contained\" color=\"error\" onClick={reset}>\r\n        Reset\r\n      </Button>\r\n      {/* All states are set to null initially. Since null evaluates to false, we want to check specifically that they are not null. Due to the boolean in the evolve question.\r\n      I could just check it for the evolve question, since it is the only boolean, but I want to keep do apply the same logic to the other questions \r\n      in case I add more in the future. */}\r\n\r\n      {/* Pokemon type? */}\r\n      <Stack className=\"classes.root\">\r\n        {type === null && (\r\n          <div style={{ fontSize: 50 }}>\r\n            <strong> Select Type</strong>{\" \"}\r\n            <TypeButtonsMap\r\n              uniqueWeaknessArray={uniqueWeaknessArray}\r\n              onClick={typeAssign}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {/* Pokemon weakness? */}\r\n        {type !== null && weakness === null && (\r\n          <div style={{ fontSize: 50 }}>\r\n            <strong>Select Weakness</strong>\r\n            <TypeButtonsMap\r\n              uniqueWeaknessArray={uniqueWeaknessArray}\r\n              onClick={weaknessAssign}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {/* Can or can't evolve? */}\r\n        {type !== null && weakness !== null && evolve === null && (\r\n          <div style={{ fontSize: 50 }}>\r\n            <strong>Does your Pokemon evolve?</strong>\r\n            <EvolveBtn mapEvolutions={mapEvolutions} onClick={evolveAssign} />\r\n          </div>\r\n        )}\r\n\r\n        {/* What height? */}\r\n        {type !== null &&\r\n          weakness !== null &&\r\n          evolve !== null &&\r\n          height === null && (\r\n            <div style={{ fontSize: 50 }}>\r\n              <strong>Select Height</strong>\r\n              <HeightBtn mapHeight={mapHeight} onClick={heightAssign} />\r\n            </div>\r\n          )}\r\n\r\n        {/* What weight? */}\r\n        {type !== null &&\r\n          weakness !== null &&\r\n          evolve !== null &&\r\n          height !== null &&\r\n          weight === null && (\r\n            <div style={{ fontSize: 50 }}>\r\n              <strong>Select Weight</strong>\r\n              <WeightBtn mapWeight={mapWeight} onClick={weightAssign} />\r\n            </div>\r\n          )}\r\n\r\n        {/* Result */}\r\n        {type !== null &&\r\n          weakness !== null &&\r\n          evolve !== null &&\r\n          height !== null &&\r\n          weight !== null && (\r\n            <div style={{ fontSize: 55 }}>\r\n              <strong>Here is your Pokemon!</strong>\r\n            </div>\r\n          )}\r\n      </Stack>\r\n      <div className=\"displayPokemon\">\r\n        {pokemonData.map((pokeObj) => (\r\n          <DisplayPokemon key={pokeObj.id} pokeObj={pokeObj} />\r\n        ))}\r\n\r\n        {/*         <h1>History</h1>\r\n        {renderChoices()} */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./App.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}