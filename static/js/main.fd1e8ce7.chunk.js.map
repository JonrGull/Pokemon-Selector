{"version":3,"sources":["components/API/GetPokemonCries.js","components/UI/DisplayPokemon.js","components/UI/buttons/HeightBtn.js","components/UI/buttons/WeightBtn.js","components/UI/buttons/TypeButtonsMap.js","components/UI/buttons/EvolveBtn.js","components/UI/buttons/ResetBtn.js","App.js","index.js"],"names":["PKMN_API_KEY","process","GetPokemonCries","pokeID","App","runCryOnce","audio","Audio","xhr","XMLHttpRequest","open","setRequestHeader","send","onreadystatechange","readyState","status","console","log","responseType","onload","blob","Blob","response","type","objectUrl","URL","createObjectURL","src","revokeObjectURL","play","onpause","DisplayPokemon","pokeObj","selectPoke","pokemonData","Card","sx","minWidth","m","backgroundColor","CardActionArea","onClick","undefined","id","CardContent","Typography","variant","component","name","num","fontSize","color","gutterBottom","img","alt","japanese_name","HeightBtn","mapHeight","lessThanOne","Math","min","Button","betweenOneAndThree","some","v","overThree","max","Stack","justifyContent","gap","flexDirection","width","flexWrap","WeightBtn","mapWeight","lessThanFive","betweenFiveAndTwentyFive","overTwentyFive","TypeButtonsMap","uniqueWeaknessArray","mapButtons","sort","map","EvolveBtn","mapEvolutions","canEvolve","cannotEvolve","ResetBtn","setPokemonData","PokemonLibrary","setPokemonAttributes","prevPokeArray","pokemon","prevState","weakness","evolve","height","weight","useState","pokemonAttributes","typeAssign","useCallback","typeInput","filter","includes","weaknessAssign","typeWeaknessInput","weaknesses","evolveAssign","prev_evolution","next_evolution","heightAssign","minHeight","maxHeight","weightAssign","minWeight","maxWeight","mapWeaknesses","flatMap","Set","a","b","Array","isArray","poke","className","length","style","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd1e8ce7.chunk.js","sourcesContent":["import App from \"../../App\";\r\n\r\n\r\nconst PKMN_API_KEY = `${process.env.REACT_APP_PKMN_API_KEY}`;\r\n\r\nexport default function GetPokemonCries(pokeID) {\r\n  if (!App.runCryOnce) {\r\n    App.runCryOnce = true;\r\n\r\n    let pokeURL = \"https://api.pkmnapi.com/v1/pokemon/cries\"; // just to keep the GET shorter\r\n\r\n    var audio = new Audio();\r\n    const xhr = new XMLHttpRequest();\r\n\r\n    /*     xhr.addEventListener(\"load\", () => {\r\n      console.log(xhr.response); // for logging\r\n    }); */\r\n\r\n    xhr.open(\"GET\", `${pokeURL}/${pokeID}`);\r\n    xhr.setRequestHeader(\"Authorization\", PKMN_API_KEY);\r\n    xhr.setRequestHeader(\"Accept\", \"audio/wav\");\r\n    xhr.send(null);\r\n\r\n    xhr.onreadystatechange = function () {\r\n      if (xhr.readyState === 4) {\r\n        // when it's done\r\n        if (xhr.status === 200) {\r\n          // if successful\r\n          console.log(\"successful\");\r\n        } else {\r\n          //Because some Pokemon cries do not work right now, so this sets it back to false if the request fails\r\n          App.runCryOnce = false;\r\n        }\r\n      }\r\n    };\r\n\r\n    xhr.responseType = \"blob\";\r\n    xhr.onload = function () {\r\n      var blob = new Blob([xhr.response], { type: \"audio/wav\" });\r\n      var objectUrl = URL.createObjectURL(blob);\r\n      audio.src = objectUrl;\r\n      // Release resource when it's loaded\r\n      audio.onload = function () {\r\n        URL.revokeObjectURL(objectUrl);\r\n      };\r\n      audio.play();\r\n      audio.onpause = function () {\r\n        // Waiting for it to not be playing anymore. onpause means, it has stopped playing. Once it's done playing, we can set it to false and it's ready to play again.\r\n        App.runCryOnce = false;\r\n      };\r\n    };\r\n  }\r\n}\r\n\r\n/* \r\nNO CRY? \r\n#6,#9,#15,#71\r\n*/\r\n\r\n/* \r\n\r\nconst { data } = await axios.get(url, {\r\n  responseType: 'arraybuffer',\r\n  headers: {\r\n      'Content-Type': 'audio/wav'\r\n  }\r\n});\r\nconst blob = new Blob([data], {\r\n    type: 'audio/wav'\r\n}); */\r\n","import Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { CardActionArea } from \"@mui/material\";\r\nimport GetPokemonCries from \"../API/GetPokemonCries\";\r\n\r\nexport default function DisplayPokemon({ pokeObj, selectPoke, pokemonData }) {\r\n  // console.log(pokeObj);\r\n  // console.log(pokemonData);\r\n\r\n  return (\r\n    <div>\r\n      <Card sx={{ minWidth: 300, m: 1, backgroundColor: \"#b3e5fc\" }}>\r\n        <CardActionArea\r\n          onClick={() => {\r\n            if (pokemonData !== undefined) {\r\n              selectPoke(pokeObj);\r\n            } else {\r\n              GetPokemonCries(pokeObj.id); // lets you click on pokemon card to play sound again\r\n            }\r\n          }}\r\n        >\r\n          <CardContent>\r\n            <Typography variant=\"h5\" component=\"div\" id={pokeObj.name}>\r\n              #{pokeObj.num} {pokeObj.name}\r\n            </Typography>\r\n            <Typography\r\n              sx={{ fontSize: 14 }}\r\n              color=\"text.secondary\"\r\n              gutterBottom\r\n            >\r\n              {pokeObj.type[0]} {pokeObj.type[1]}\r\n            </Typography>\r\n            <img src={pokeObj.img} alt=\"Pokemon Images\"></img>\r\n            <Typography\r\n              sx={{ fontSize: 14 }}\r\n              color=\"text.secondary\"\r\n              gutterBottom\r\n            >\r\n              {pokeObj.japanese_name}\r\n            </Typography>\r\n          </CardContent>\r\n        </CardActionArea>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\n/*\r\npokemonData becomes undefined after selecting a pokemon. So we can use that to run selectPoke only once time.\r\n*/\r\n","import { Button } from \"@mui/material\";\r\nimport Stack from \"@mui/material/Stack\";\r\n\r\nexport default function HeightBtn({ mapHeight, onClick }) {\r\n  // console.log(mapHeight);\r\n  //pokemon less than 1m\r\n  const lessThanOne =\r\n    Math.min(...mapHeight) <= 1 ? (\r\n      <Button variant=\"contained\" onClick={() => onClick(0, 1)}>\r\n        Small\r\n      </Button>\r\n    ) : null;\r\n\r\n  //pokemon between 1m and 3m\r\n  const betweenOneAndThree = mapHeight.some((v) => v >= 1 && v <= 3) ? (\r\n    <Button variant=\"contained\" onClick={() => onClick(1, 3)}>\r\n      Medium\r\n    </Button>\r\n  ) : null;\r\n\r\n  //pokemon over 3m\r\n  const overThree =\r\n    Math.max(...mapHeight) >= 3 ? (\r\n      <Button variant=\"contained\" onClick={() => onClick(3, 10)}>\r\n        Big\r\n      </Button>\r\n    ) : null;\r\n\r\n  return (\r\n    <Stack\r\n      justifyContent=\"center\"\r\n      gap={2}\r\n      flexDirection=\"row\"\r\n      width={1.0}\r\n      flexWrap=\"wrap\"\r\n    >\r\n      {lessThanOne}\r\n      {betweenOneAndThree}\r\n      {overThree}\r\n    </Stack>\r\n  );\r\n}\r\n","import { Button } from \"@mui/material\";\r\nimport Stack from \"@mui/material/Stack\";\r\n\r\nexport default function WeightBtn({ mapWeight, onClick }) {\r\n  // console.log(mapWeight);\r\n  //pokemon less than 5kg\r\n  const lessThanFive =\r\n    Math.min(...mapWeight) <= 5 ? ( //is the max number less than 5? if true, show the button\r\n      <Button variant=\"contained\" onClick={() => onClick(0, 5)}>\r\n        Light\r\n      </Button>\r\n    ) : null;\r\n\r\n  //pokemon between 5kg and 25kg\r\n  const betweenFiveAndTwentyFive = mapWeight.some((v) => v > 5 && v < 25) ? ( // as long as 1 number is between 5 and 25, show this button\r\n    <Button variant=\"contained\" onClick={() => onClick(5, 25)}>\r\n      Medium\r\n    </Button>\r\n  ) : null;\r\n\r\n  const overTwentyFive =\r\n    Math.max(...mapWeight) > 25 ? (\r\n      <Button variant=\"contained\" onClick={() => onClick(25, 500)}>\r\n        Heavy\r\n      </Button>\r\n    ) : null;\r\n\r\n  // can I further reduce this? Can I go to the function and do math.max/min over there and bring those two values here go show buttons?\r\n  // I could make this range checker its  own function and just pass values?\r\n  return (\r\n    <Stack\r\n      justifyContent=\"center\"\r\n      gap={2}\r\n      flexDirection=\"row\"\r\n      width={1.0}\r\n      flexWrap=\"wrap\"\r\n    >\r\n      {lessThanFive}\r\n      {betweenFiveAndTwentyFive}\r\n      {overTwentyFive}\r\n    </Stack>\r\n  );\r\n}\r\n\r\n/* \r\ncant get flareon, 25.0 kg what about a pokemon who is like 25.2kg? I can't start the count at 26.\r\n\r\n\r\n\r\nLogging mapWeight will not log until this component is rendered in the questions! \r\n\r\nMake the range checker into func?\r\nfunction between(x, min, max) {\r\n  return x >= min && x <= max;\r\n}\r\n// ...\r\nif (between(x, 0.001, 0.009)) {\r\n  // something\r\n}\r\n*/\r\n","import Button from \"@mui/material/Button\";\r\nimport { Stack } from \"@mui/material\";\r\n\r\nexport default function TypeButtonsMap({ uniqueWeaknessArray, onClick }) {\r\n  const mapButtons = uniqueWeaknessArray.sort().map((type) => (\r\n    <Button key={type} variant=\"contained\" onClick={() => onClick(type)}>\r\n      {type}\r\n    </Button>\r\n  ));\r\n  return (\r\n    <Stack\r\n      justifyContent=\"center\"\r\n      gap={2}\r\n      flexDirection=\"row\"\r\n      width={1.0}\r\n      flexWrap=\"wrap\"\r\n    >\r\n      {mapButtons}\r\n    </Stack>\r\n  );\r\n}\r\n\r\n/* \r\nAll my button components have the same Stack styling. Can I put that info on the main page and pass it to all the components?\r\n\r\nButton is created in the function and then returned. I used to have it so the button was created in the return, but this just returned all buttons at once\r\nwithout styling them properly.\r\n\r\nIf I want to change the buttons to have Japanese text, could I do something with the replace method?\r\n\r\nSorting then mapping allows the buttons to always be alphabetical\r\n*/\r\n","import { Button } from \"@mui/material\";\r\nimport { Stack } from \"@mui/material\";\r\n\r\nexport default function EvolveBtn({ mapEvolutions, onClick }) {\r\n  //.some() is used to show both buttons if mapEvolutions has a mix of true and false.\r\n\r\n  //pokemon that has a property prev_evolution or next_evolution\r\n  const canEvolve = mapEvolutions.some((v) => v === true) ? (\r\n    <Button variant=\"contained\" onClick={() => onClick(true)}>\r\n      Yes\r\n    </Button>\r\n  ) : null;\r\n\r\n  //pokemon that do not have the property\r\n  const cannotEvolve = mapEvolutions.some((v) => v === false) ? (\r\n    <Button variant=\"contained\" onClick={() => onClick(false)}>\r\n      No\r\n    </Button>\r\n  ) : null;\r\n\r\n  return (\r\n    <Stack\r\n      justifyContent=\"center\"\r\n      gap={2}\r\n      flexDirection=\"row\"\r\n      width={1.0}\r\n      flexWrap=\"wrap\"\r\n    >\r\n      {canEvolve}\r\n      {cannotEvolve}\r\n    </Stack>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Button } from \"@mui/material\";\r\n\r\nexport default function ResetBtn({\r\n  setPokemonData,\r\n  PokemonLibrary,\r\n  setPokemonAttributes,\r\n}) {\r\n  //Reset ALL data in states\r\n  function resetAll() {\r\n    setPokemonData((prevPokeArray) => (prevPokeArray = PokemonLibrary.pokemon));\r\n    setPokemonAttributes((prevState) => ({\r\n      type: null,\r\n      weakness: null,\r\n      evolve: null,\r\n      height: null,\r\n      weight: null,\r\n    }));\r\n  }\r\n  //would need to include all other states that we declared\r\n  return (\r\n    <Button variant=\"contained\" color=\"error\" onClick={resetAll}>\r\n      Reset\r\n    </Button>\r\n  );\r\n}\r\n","import React, { useState, useCallback } from \"react\";\r\n// import { Button } from \"@mui/material\";\r\nimport Stack from \"@mui/material/Stack\";\r\n\r\nimport DisplayPokemon from \"./components/UI/DisplayPokemon\";\r\nimport PokemonLibrary from \"./data/PokemonList.json\";\r\nimport HeightBtn from \"./components/UI/buttons/HeightBtn\";\r\nimport WeightBtn from \"./components/UI/buttons/WeightBtn\";\r\nimport TypeButtonsMap from \"./components/UI/buttons/TypeButtonsMap\";\r\nimport EvolveBtn from \"./components/UI/buttons/EvolveBtn\";\r\nimport \"./App.css\";\r\nimport GetPokemonCries from \"./components/API/GetPokemonCries\";\r\nimport ResetBtn from \"./components/UI/buttons/ResetBtn\";\r\n\r\nexport default function App() {\r\n  const [pokemonData, setPokemonData] = useState(PokemonLibrary.pokemon); //The giant array of pokemon with pokemon nested in individual obj\r\n  const [pokemonAttributes, setPokemonAttributes] = useState({\r\n    type: null,\r\n    weakness: null,\r\n    evolve: null,\r\n    height: null,\r\n    weight: null,\r\n  });\r\n\r\n  //#region Questions\r\n  /* QUESTION FUNCTIONS */\r\n\r\n  console.log(pokemonAttributes);\r\n  // assigns type of pokemon\r\n  const typeAssign = useCallback(\r\n    (typeInput) => {\r\n      setPokemonAttributes((prevState) => ({\r\n        // copy the values in the entire object and spread them, change \"type\", \"weakness\" etc.\r\n        ...prevState,\r\n        type: `${typeInput}`,\r\n      }));\r\n\r\n      setPokemonData((prevPokeArray) =>\r\n        prevPokeArray.filter((pokemon) => pokemon.type.includes(`${typeInput}`))\r\n      );\r\n    },\r\n    [setPokemonAttributes, setPokemonData]\r\n  );\r\n\r\n  // assigns weakness of pokemon\r\n  const weaknessAssign = useCallback(\r\n    (typeWeaknessInput) => {\r\n      setPokemonAttributes((prevState) => ({\r\n        ...prevState,\r\n        weakness: `${typeWeaknessInput}`,\r\n      }));\r\n\r\n      setPokemonData((prevPokeArray) =>\r\n        prevPokeArray.filter((pokemon) =>\r\n          pokemon.weaknesses.includes(`${typeWeaknessInput}`)\r\n        )\r\n      );\r\n    },\r\n    [setPokemonAttributes, setPokemonData]\r\n  );\r\n\r\n  // assigns boolean upon asking if pokemon can evolve\r\n  const evolveAssign = useCallback(\r\n    (canEvolve) => {\r\n      setPokemonAttributes((prevState) => ({\r\n        ...prevState,\r\n        evolve: canEvolve,\r\n      }));\r\n\r\n      setPokemonData((prevPokeArray) =>\r\n        prevPokeArray.filter((pokemon) => {\r\n          if (canEvolve)\r\n            return pokemon.prev_evolution || pokemon.next_evolution;\r\n          else return !pokemon.prev_evolution && !pokemon.next_evolution;\r\n        })\r\n      );\r\n    },\r\n    [setPokemonAttributes, setPokemonData]\r\n  );\r\n\r\n  // assigns height of pokemon\r\n  const heightAssign = useCallback(\r\n    (minHeight, maxHeight) => {\r\n      setPokemonAttributes((prevState) => ({\r\n        ...prevState,\r\n        height: maxHeight,\r\n      }));\r\n\r\n      setPokemonData((prevPokeArray) =>\r\n        prevPokeArray.filter(\r\n          (pokemon) =>\r\n            pokemon.height >= `${minHeight}` && pokemon.height <= `${maxHeight}`\r\n        )\r\n      );\r\n    },\r\n    [setPokemonAttributes, setPokemonData]\r\n  );\r\n\r\n  // assigns weight of pokemon\r\n  const weightAssign = useCallback(\r\n    (minWeight, maxWeight) => {\r\n      setPokemonAttributes((prevState) => ({\r\n        ...prevState,\r\n        weight: maxWeight,\r\n      }));\r\n\r\n      setPokemonData((prevPokeArray) =>\r\n        prevPokeArray.filter(\r\n          (pokemon) =>\r\n            pokemon.weight >= `${minWeight}` && pokemon.weight <= `${maxWeight}`\r\n        )\r\n      );\r\n    },\r\n    [setPokemonAttributes, setPokemonData]\r\n  );\r\n\r\n  //#endregion\r\n\r\n  //Reset ALL data in states\r\n  /*   const reset = () => {\r\n    setPokemonData((prevPokeArray) => (prevPokeArray = PokemonLibrary.pokemon));\r\n    setPokemonAttributes((prevState) => ({\r\n      type: null,\r\n      weakness: null,\r\n      evolve: null,\r\n      height: null,\r\n      weight: null,\r\n    }));\r\n  };\r\n  //would need to include all other states that we declared */\r\n\r\n  //#region Child Component\r\n  /* CHILD COMPONENT VARIABLES */\r\n\r\n  // Logs all weaknesses to pass to Btn components\r\n  const mapWeaknesses = pokemonData.flatMap((pokeObj) => pokeObj.weaknesses);\r\n  const uniqueWeaknessArray = [...new Set(mapWeaknesses)];\r\n\r\n  //Get all weight and height of all pokemon, sort, and pass variable to weightBtn/heightBtn. If weight/height is within ranges, show button.\r\n  const mapWeight = pokemonData\r\n    .map((pokeObj) => pokeObj.weight)\r\n    .sort((a, b) => a - b);\r\n  const mapHeight = pokemonData\r\n    .map((pokeObj) => pokeObj.height)\r\n    .sort((a, b) => a - b);\r\n\r\n  // Passes to child component to display Yes/No buttons which display if btns are displayed\r\n  const mapEvolutions = pokemonData.map(\r\n    (pokeObj) =>\r\n      Array.isArray(pokeObj.prev_evolution) ||\r\n      Array.isArray(pokeObj.next_evolution)\r\n  );\r\n  // console.log(mapEvolutions);\r\n\r\n  //If user clicks on card to select pokemon, return the pokemon in array so that it can be mapped.\r\n  const selectPoke = (poke) => {\r\n    setPokemonData([poke]);\r\n  };\r\n\r\n  //#endregion Child Component\r\n\r\n  //Logs pokemon array each render\r\n  // console.log(pokemonData);\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Pokémon Selector!</h1>\r\n      <ResetBtn\r\n        setPokemonData={setPokemonData}\r\n        PokemonLibrary={PokemonLibrary}\r\n        setPokemonAttributes={setPokemonAttributes}\r\n      ></ResetBtn>\r\n      {/* All states are set to null initially. Since null evaluates to false, we want to check specifically that they are not null. Due to the boolean in the evolve question.\r\n      I could just check it for the evolve question, since it is the only boolean, but I want to keep do apply the same logic to the other questions \r\n      in case I add more in the future. */}\r\n\r\n      <div>\r\n        {pokemonData.length === 1 && (\r\n          <div>\r\n            <h1>Nice choice!</h1>\r\n            <h2>\r\n              <Stack\r\n                justifyContent=\"center\"\r\n                gap={2}\r\n                flexDirection=\"row\"\r\n                width={1.0}\r\n                flexWrap=\"wrap\"\r\n              >\r\n                {/* map last pokemon. This does not interfere with the component from below.*/}\r\n                {pokemonData.map((pokeObj) => (\r\n                  <DisplayPokemon key={pokeObj.id} pokeObj={pokeObj} />\r\n                ))}\r\n                {/* plays sound of last remaining pokemon */}\r\n                {GetPokemonCries(pokemonData.map((pokeObj) => pokeObj.id))}\r\n              </Stack>\r\n            </h2>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div>\r\n        {/* bandaid solution of preventing both of these from rendering.*/}\r\n        {pokemonData.length !== 1 && (\r\n          <div>\r\n            {/* Pokemon type? */}\r\n            {pokemonAttributes.type === null && (\r\n              <div style={{ fontSize: 50 }}>\r\n                <strong> Select Type</strong>\r\n                <TypeButtonsMap\r\n                  uniqueWeaknessArray={uniqueWeaknessArray}\r\n                  onClick={typeAssign}\r\n                />\r\n              </div>\r\n            )}\r\n\r\n            {/* Pokemon weakness? */}\r\n            {pokemonAttributes.type !== null &&\r\n              pokemonAttributes.weakness === null && (\r\n                <div style={{ fontSize: 50 }}>\r\n                  <strong>Select Weakness</strong>\r\n                  <TypeButtonsMap\r\n                    uniqueWeaknessArray={uniqueWeaknessArray}\r\n                    onClick={weaknessAssign}\r\n                  />\r\n                </div>\r\n              )}\r\n\r\n            {/* Can or can't evolve? */}\r\n            {pokemonAttributes.type !== null &&\r\n              pokemonAttributes.weakness !== null &&\r\n              pokemonAttributes.evolve === null && (\r\n                <div style={{ fontSize: 50 }}>\r\n                  <strong>Does your Pokemon evolve?</strong>\r\n                  <EvolveBtn\r\n                    mapEvolutions={mapEvolutions}\r\n                    onClick={evolveAssign}\r\n                  />\r\n                </div>\r\n              )}\r\n\r\n            {/* What height? */}\r\n            {pokemonAttributes.type !== null &&\r\n              pokemonAttributes.weakness !== null &&\r\n              pokemonAttributes.evolve !== null &&\r\n              pokemonAttributes.height === null && (\r\n                <div style={{ fontSize: 50 }}>\r\n                  <strong>Select Height</strong>\r\n                  <HeightBtn mapHeight={mapHeight} onClick={heightAssign} />\r\n                </div>\r\n              )}\r\n\r\n            {/* What weight? */}\r\n            {pokemonAttributes.type !== null &&\r\n              pokemonAttributes.weakness !== null &&\r\n              pokemonAttributes.evolve !== null &&\r\n              pokemonAttributes.height !== null &&\r\n              pokemonAttributes.weight === null && (\r\n                <div style={{ fontSize: 50 }}>\r\n                  <strong>Select Weight</strong>\r\n                  <WeightBtn mapWeight={mapWeight} onClick={weightAssign} />\r\n                </div>\r\n              )}\r\n\r\n            {/* Result */}\r\n            {pokemonAttributes.type !== null &&\r\n              pokemonAttributes.weakness !== null &&\r\n              pokemonAttributes.evolve !== null &&\r\n              pokemonAttributes.height !== null &&\r\n              pokemonAttributes.weight !== null && (\r\n                <div style={{ fontSize: 55 }}>\r\n                  <strong>Here are your Pokemon!</strong>\r\n                </div>\r\n              )}\r\n            <h1>See one you like? Choose it!</h1>\r\n            <div className=\"display-pokemon\">\r\n              {pokemonData.map((pokeObj) => (\r\n                <DisplayPokemon\r\n                  key={pokeObj.id}\r\n                  pokeObj={pokeObj}\r\n                  selectPoke={selectPoke}\r\n                  pokemonData={pokemonData}\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n/* \r\nPROBLEM - if only one pokemon is left after going through questions, it does not play the sound. But clicking it works\r\n \r\nDOES NOT WORK {GetPokemonCries(pokemonData.map((pokeObj) => pokeObj.id))} plays 2 times if clicked, but sound does play upon final choice twice.\r\nIs it because state is being updated? Maybe would be better to useEffect?\r\n\r\n\r\n*/\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./App.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}