{"version":3,"sources":["components/DisplayPokemon.js","components/TypeButtons.js","App.js","index.js"],"names":["DisplayPokemon","pokeObj","num","name","type","weaknesses","src","img","alt","id","TypeButtons","handleClick","className","onClick","App","useState","PokemonLibrary","pokemon","pokemonData","setPokemonData","reset","prevPokeArray","length","console","log","typeButtonInput","filter","pokeType","includes","weaknessButtonInput","map","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAAe,SAASA,EAAT,GAAsC,IAAZC,EAAW,EAAXA,QACvC,OACE,8BACE,kCACIA,EAAQC,IADZ,MACoBD,EAAQE,KAD5B,MACqCF,EAAQG,KAAK,GADlD,IACuDH,EAAQG,KAAK,GADpE,mBAEgBH,EAAQI,WACtB,qBAAKC,IAAKL,EAAQM,IAAKC,IAAI,qBAHrBP,EAAQQ,MCHP,SAASC,EAAT,GAAuC,IAAhBC,EAAe,EAAfA,YAEpC,OACE,8BAEE,iCAIE,wBAAQC,UAAY,iBAAiBC,QAAS,kBAAMF,EAAY,QAAhE,8BACA,wBAAQC,UAAY,iBAAiBC,QAAS,kBAAMF,EAAY,WAAhE,iCACA,wBAAQC,UAAY,iBAAiBC,QAAS,kBAAMF,EAAY,aAAhE,6BACA,wBAAQC,UAAY,iBAAiBC,QAAS,kBAAMF,EAAY,aAAhE,mCACA,wBAAQC,UAAY,iBAAiBC,QAAS,kBAAMF,EAAY,SAAhE,+BACA,wBAAQC,UAAY,iBAAiBC,QAAS,kBAAMF,EAAY,WAAhE,uCACA,wBAAQC,UAAY,iBAAiBC,QAAS,kBAAMF,EAAY,UAAhE,gCACA,wBAAQC,UAAY,iBAAiBC,QAAS,kBAAMF,EAAY,UAAhE,gCACA,wBAAQC,UAAY,iBAAiBC,QAAS,kBAAMF,EAAY,WAAhE,uCACA,wBAAQC,UAAY,iBAAiBC,QAAS,kBAAMF,EAAY,QAAhE,8BACA,wBAAQC,UAAY,iBAAiBC,QAAS,kBAAMF,EAAY,WAAhE,2BACA,wBAAQC,UAAY,iBAAiBC,QAAS,kBAAMF,EAAY,WAAhE,iCACA,wBAAQC,UAAY,iBAAiBC,QAAS,kBAAMF,EAAY,YAAhE,kCACA,wBAAQC,UAAY,iBAAiBC,QAAS,kBAAMF,EAAY,SAAhE,+BACA,wBAAQC,UAAY,iBAAiBC,QAAS,kBAAMF,EAAY,UAAhE,qC,WCjBO,SAASG,IACtB,MAAsCC,mBAASC,EAAeC,SAA9D,mBAAOC,EAAP,KAAoBC,EAApB,KA4DA,SAASC,IACPD,GAAe,SAACE,GAAD,OAAoCL,EAAeC,WAIpE,OAAIC,EAAYI,QAAU,EAEtB,qBAAKV,UAAU,YAAf,SACE,wBAAQC,QAASO,EAAjB,oDAMNG,QAAQC,IAAIN,GAGV,sBAAKN,UAAU,MAAf,UACE,mDACA,sBAAKA,UAAU,cAAf,UACE,2GAIA,cAACF,EAAD,CAAaC,YArDG,SAACc,GACrBN,GAAe,SAACE,GAAD,OACbA,EAAcK,QAAO,SAACC,GACpB,OAAOA,EAASvB,KAAKwB,SAAd,UAA0BH,gBAoDnC,gCACE,oEACA,cAACf,EAAD,CAAaC,YAjDI,SAACkB,GACtBV,GAAe,SAACE,GAAD,OACbA,EAAcK,QAAO,SAACC,GACpB,OAAOA,EAAStB,WAAWuB,SAApB,UAAgCC,gBAiDzC,sBAAKjB,UAAU,iBAAf,UACGM,EAAYY,KAAI,SAAC7B,GAAD,OACf,cAACD,EAAD,CAAgBC,QAASA,OAE3B,wBAAQW,UAAU,WAAWC,QAASO,EAAtC,0BChGRW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.4c2e56ef.chunk.js","sourcesContent":["export default function DisplayPokemon({ pokeObj }) {\r\n  return (\r\n    <div>\r\n      <p key={pokeObj.id}>\r\n        #{pokeObj.num} | {pokeObj.name} | {pokeObj.type[0]} {pokeObj.type[1]} |\r\n        Weaknesses - {pokeObj.weaknesses}\r\n        <img src={pokeObj.img} alt=\"Pokemon Images\"></img>\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","export default function TypeButtons({ handleClick }) {\r\n  //so here we would need to pass in different functions if we want to reuse these buttons\r\n  return (\r\n    <div>\r\n      {/* prettier-ignore */}\r\n      <span>\r\n        {/* We could TRY to use the pictures from the card game...but that would require pictures, not emojis */}\r\n        {/* Also I'd like to remove buttons if no Pokemon are left*/}\r\n        {/* Is it possible to have a function make buttons for us? They all have a different parameter, unsure if possible */}\r\n        <button className = \"filterTypeBtns\" onClick={() => handleClick(\"Bug\")}>Bug üêõ</button>\r\n        <button className = \"filterTypeBtns\" onClick={() => handleClick(\"Dragon\")}>Dragon üê≤</button>\r\n        <button className = \"filterTypeBtns\" onClick={() => handleClick(\"Electric\")}>Electric ‚ö°</button>\r\n        <button className = \"filterTypeBtns\" onClick={() => handleClick(\"Fighting\")}>Fighting ü•ä</button>\r\n        <button className = \"filterTypeBtns\" onClick={() => handleClick(\"Fire\")}>Fire üî•</button>\r\n        <button className = \"filterTypeBtns\" onClick={() => handleClick(\"Flying\")}>Flying üïäÔ∏è</button>\r\n        <button className = \"filterTypeBtns\" onClick={() => handleClick(\"Ghost\")}>Ghost üëª</button>\r\n        <button className = \"filterTypeBtns\" onClick={() => handleClick(\"Grass\")}>Grass üçÉ</button>\r\n        <button className = \"filterTypeBtns\" onClick={() => handleClick(\"Ground\")}>Ground üï≥Ô∏è</button>\r\n        <button className = \"filterTypeBtns\" onClick={() => handleClick(\"Ice\")}>Ice üßä</button>\r\n        <button className = \"filterTypeBtns\" onClick={() => handleClick(\"Normal\")}>Normal ‚≠ê</button>\r\n        <button className = \"filterTypeBtns\" onClick={() => handleClick(\"Poison\")}>Poison ‚ò†Ô∏è</button>\r\n        <button className = \"filterTypeBtns\" onClick={() => handleClick(\"Psychic\")}>Psychic üîÆ</button>\r\n        <button className = \"filterTypeBtns\" onClick={() => handleClick(\"Rock\")}>Rock üß±</button>\r\n        <button className = \"filterTypeBtns\" onClick={() => handleClick(\"Water\")}>Water üíß</button>\r\n        </span>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport DisplayPokemon from \"./components/DisplayPokemon\";\r\nimport TypeButtons from \"./components/TypeButtons\";\r\nimport \"./App.css\";\r\nimport PokemonLibrary from \"./data/PokemonList.json\";\r\n\r\nexport default function App() {\r\n  const [pokemonData, setPokemonData] = useState(PokemonLibrary.pokemon); //The giant array of pokemon with pokemon nested in individual obj\r\n\r\n  /* \r\nPut each question inside its own separate component that App pulls from to render each group of buttons and functions????\r\n*/\r\n\r\n  // const [languageState, SetLanguageState] = useState();\r\n\r\n  /* React.useEffect(() => { //still works without this, so let's remove it for now.\r\n    setPokemonData(PokemonLibrary.pokemon);\r\n  }, []); */\r\n\r\n  /* \r\nPut all these functions in useEffect?\r\n*/\r\n\r\n  // I believe this all works, unsure if we can use it tho?\r\n  /*   const { typeArray = pokemonData.map((getType) => getType.type) } =\r\n    pokemonData;\r\n  // console.log(typeArray);\r\n\r\n  // .map((ele) => ele) } = pokemonData;\r\n  const filterTypeOne = (typeButtonInput) => {\r\n    // can i use array destructuring here?\r\n    setPokemonData((prevPokeArray) =>\r\n      prevPokeArray.filter(() => {\r\n        return typeArray.includes(`${typeButtonInput}`);\r\n      })\r\n    );\r\n  }; */\r\n\r\n  const filterTypeOne = (typeButtonInput) => {\r\n    setPokemonData((prevPokeArray) =>\r\n      prevPokeArray.filter((pokeType) => {\r\n        return pokeType.type.includes(`${typeButtonInput}`);\r\n      })\r\n    );\r\n  };\r\n\r\n  const filterWeakness = (weaknessButtonInput) => {\r\n    setPokemonData((prevPokeArray) =>\r\n      prevPokeArray.filter((pokeType) => {\r\n        return pokeType.weaknesses.includes(`${weaknessButtonInput}`);\r\n      })\r\n    );\r\n  };\r\n\r\n  /* \r\n  Weight may be tricky because it is written as a string - kg. Maybe I can just remove the kg part from the json to make it easier. \r\n  Then just turn it into a number. Is there a function that can take off the kg? \r\n  */\r\n  const filterWeight = (weightButtonInput) => {\r\n    setPokemonData((prevPokeArray) =>\r\n      prevPokeArray.filter((pokeType) => {\r\n        return pokeType.weight.includes(`${weightButtonInput}`);\r\n      })\r\n    );\r\n  };\r\n\r\n  //Reset State\r\n  function reset() {\r\n    setPokemonData((prevPokeArray) => (prevPokeArray = PokemonLibrary.pokemon));\r\n  }\r\n\r\n  //Error message and my terrible button. This should probably be it's own state?\r\n  if (pokemonData.length <= 0) {\r\n    return (\r\n      <div className=\"error-box\">\r\n        <button onClick={reset}>There's no more Pokemon! Try again!</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //logging array each button press\r\n  console.log(pokemonData);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Pokemon Selector!</h1>\r\n      <div className=\"ButtonGroup\">\r\n        <p>\r\n          What Pokemon type do you like? *Just to save time Ice -> Electricity\r\n          works\r\n        </p>\r\n        <TypeButtons handleClick={filterTypeOne} />\r\n      </div>\r\n      <div>\r\n        <p>What type is your Pokemon weak too?</p>\r\n        <TypeButtons handleClick={filterWeakness} />\r\n      </div>\r\n\r\n      <div className=\"displayPokemon\">\r\n        {pokemonData.map((pokeObj) => (\r\n          <DisplayPokemon pokeObj={pokeObj} />\r\n        ))}\r\n        <button className=\"resetBtn\" onClick={reset}>\r\n          Reset\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"./App.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}