{"version":3,"sources":["components/DisplayPokemon.js","components/buttons/HeightBtn.js","components/buttons/WeightBtn.js","components/buttons/TypeButtonsMap.js","components/buttons/EvolveBtn.js","App.js","index.js"],"names":["DisplayPokemon","pokeObj","num","name","type","weaknesses","src","img","alt","HeightBtn","mapHeight","onClick","lessThanOne","Math","min","Button","variant","betweenOneAndThree","some","v","overThree","max","WeightBtn","mapWeight","lessThanFive","betweenFiveAndTwentyFive","overTwentyFive","TypeButtonsMap","uniqueWeaknessArray","mapButtons","sort","map","EvolveBtn","mapEvolutions","canEvolve","cannotEvolve","App","useState","PokemonLibrary","pokemon","pokemonData","setPokemonData","setType","weakness","setWeakness","evolve","setEvolve","height","setHeight","weight","setWeight","classes","makeStyles","root","spacing","direction","justifyContent","alignItems","useStyles","reset","prevPokeArray","mapWeaknesses","flatMap","Set","a","b","Array","isArray","prev_evolution","next_evolution","length","Stack","className","id","console","log","color","style","fontSize","typeButtonInput","filter","includes","minHeight","maxHeight","minWeight","maxWeight","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bbbfa105.chunk.js","sourcesContent":["export default function DisplayPokemon({ pokeObj }) {\r\n  return (\r\n    <div>\r\n      #{pokeObj.num} | {pokeObj.name} | {pokeObj.type[0]} {pokeObj.type[1]} |\r\n      Weaknesses - {pokeObj.weaknesses}\r\n      {/* added weaknesses here temporarily just to help narrow it down */}\r\n      <img src={pokeObj.img} alt=\"Pokemon Images\"></img>\r\n    </div>\r\n  );\r\n}\r\n","import { Button } from \"@mui/material\";\r\n// import Stack from \"@mui/material/Stack\";\r\n\r\nexport default function HeightBtn({ mapHeight, onClick }) {\r\n  // console.log(mapHeight);\r\n  //pokemon less than 1m\r\n  const lessThanOne =\r\n    Math.min(...mapHeight) <= 1 ? (\r\n      <Button variant=\"contained\" onClick={() => onClick(0, 1)}>\r\n        Small\r\n      </Button>\r\n    ) : null;\r\n\r\n  //pokemon between 1m and 3m\r\n  const betweenOneAndThree = mapHeight.some((v) => v >= 1 && v <= 3) ? (\r\n    <Button variant=\"contained\" onClick={() => onClick(1, 3)}>\r\n      Medium\r\n    </Button>\r\n  ) : null;\r\n\r\n  //pokemon over 3m\r\n  const overThree =\r\n    Math.max(...mapHeight) >= 3 ? (\r\n      <Button variant=\"contained\" onClick={() => onClick(3, 10)}>\r\n        Big\r\n      </Button>\r\n    ) : null;\r\n\r\n  return (\r\n    <div>\r\n      {lessThanOne}\r\n      {betweenOneAndThree}\r\n      {overThree}\r\n    </div>\r\n  );\r\n}\r\n","import { Button } from \"@mui/material\";\r\n// import Stack from \"@mui/material/Stack\";\r\n\r\nexport default function WeightBtn({ mapWeight, onClick }) {\r\n  // console.log(mapWeight);\r\n  //pokemon less than 5kg\r\n  const lessThanFive =\r\n    Math.min(...mapWeight) <= 5 ? ( //is the max number less than 5? if true, show the button\r\n      <Button variant=\"contained\" onClick={() => onClick(0, 5)}>\r\n        Light\r\n      </Button>\r\n    ) : null;\r\n\r\n  //pokemon between 5kg and 25kg\r\n  const betweenFiveAndTwentyFive = mapWeight.some((v) => v > 5 && v < 25) ? ( // as long as 1 number is between 5 and 25, show this button\r\n    <Button variant=\"contained\" onClick={() => onClick(5, 25)}>\r\n      Medium\r\n    </Button>\r\n  ) : null;\r\n\r\n  const overTwentyFive =\r\n    Math.max(...mapWeight) > 25 ? (\r\n      <Button variant=\"contained\" onClick={() => onClick(25, 500)}>\r\n        Heavy\r\n      </Button>\r\n    ) : null;\r\n\r\n  // can I further reduce this? Can I go to the function and do math.max/min over there and bring those two values here go show buttons?\r\n  // I could make this range checker its  own function and just pass values?\r\n  return (\r\n    <div>\r\n\r\n        {lessThanFive}\r\n        {betweenFiveAndTwentyFive}\r\n        {overTwentyFive}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n/* \r\ncant get flareon, 25.0 kg what about a pokemon who is like 25.2kg? I can't start the count at 26.\r\n\r\n\r\n\r\nLogging mapWeight will not log until this component is rendered in the questions! \r\n\r\nMake the range checker into func?\r\nfunction between(x, min, max) {\r\n  return x >= min && x <= max;\r\n}\r\n// ...\r\nif (between(x, 0.001, 0.009)) {\r\n  // something\r\n}\r\n*/\r\n","import { Button } from \"@mui/material\";\r\n// import Stack from \"@mui/material/Stack\";\r\n\r\nexport default function TypeButtonsMap({ uniqueWeaknessArray, onClick }) {\r\n  const mapButtons = uniqueWeaknessArray.sort().map((type) => (\r\n    <Button key={type} variant=\"contained\" onClick={() => onClick(type)}>\r\n      {type}\r\n    </Button>\r\n  ));\r\n  return <div>{mapButtons}</div>;\r\n}\r\n\r\n/* \r\nSort then map allows the buttons to always be alphabetical\r\n*/\r\n","import { Button } from \"@mui/material\";\r\n// import Stack from \"@mui/material/Stack\";\r\n\r\nexport default function EvolveBtn({ mapEvolutions, onClick }) {\r\n  //show both buttons if mapEvolutions has a mix of true and false.\r\n\r\n  //pokemon that has a property prev_evolution or next_evolution\r\n  const canEvolve = mapEvolutions.some((v) => v === true) ? (\r\n    <Button variant=\"contained\" onClick={() => onClick(true)}>\r\n      Yes\r\n    </Button>\r\n  ) : null;\r\n\r\n  //pokemon that do not have the property\r\n  const cannotEvolve = mapEvolutions.some((v) => v === false) ? (\r\n    <Button variant=\"contained\" onClick={() => onClick(false)}>\r\n      No\r\n    </Button>\r\n  ) : null;\r\n\r\n  return (\r\n    <div>\r\n      {canEvolve}\r\n      {cannotEvolve}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport DisplayPokemon from \"./components/DisplayPokemon\";\r\nimport \"./App.css\";\r\nimport { Button } from \"@mui/material\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport PokemonLibrary from \"./data/PokemonList.json\";\r\nimport HeightBtn from \"./components/buttons/HeightBtn\";\r\nimport WeightBtn from \"./components/buttons/WeightBtn\";\r\nimport TypeButtonsMap from \"./components/buttons/TypeButtonsMap\";\r\nimport EvolveBtn from \"./components/buttons/EvolveBtn\";\r\n\r\nexport default function App() {\r\n  const [pokemonData, setPokemonData] = useState(PokemonLibrary.pokemon); //The giant array of pokemon with pokemon nested in individual obj\r\n  // const [history, setHistory] = useState([Array(4).fill(null)]); //4 for 4 questions. Will need up increase this number if add more questions. Holds our choices?\r\n  // const [stepNumber, setStepNumber] = useState(0); // will show question state buttons\r\n  const [type, setType] = useState(null);\r\n  const [weakness, setWeakness] = useState(null);\r\n  const [evolve, setEvolve] = useState(null); // so null is inherently FALSE, so technically this will always be false. Which is why true works.\r\n  const [height, setHeight] = useState(null);\r\n  const [weight, setWeight] = useState(null);\r\n\r\n  const useStyles = makeStyles({\r\n    root: {\r\n      spacing: 8,\r\n      direction: \"row\",\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n    },\r\n  });\r\n  const classes = useStyles();\r\n\r\n  //#region Questions\r\n  /* QUESTION FUNCTIONS */\r\n\r\n  // assigns type of pokemon\r\n  const typeAssign = (typeButtonInput) => {\r\n    setType(typeButtonInput);\r\n    setPokemonData((prevPokeArray) =>\r\n      prevPokeArray.filter((pokemon) => {\r\n        return pokemon.type.includes(`${typeButtonInput}`);\r\n      })\r\n    );\r\n  };\r\n\r\n  // assigns weakness of pokemon\r\n  const weaknessAssign = (typeButtonInput) => {\r\n    setWeakness(typeButtonInput);\r\n    setPokemonData((prevPokeArray) =>\r\n      prevPokeArray.filter((pokemon) => {\r\n        return pokemon.weaknesses.includes(`${typeButtonInput}`);\r\n      })\r\n    );\r\n  };\r\n\r\n  // assigns true or false upon asking if pokemon can evolve\r\n  const evolveAssign = (canEvolve) => {\r\n    setEvolve(canEvolve); // is it okay if this is a boolean with using !evolve?\r\n    setPokemonData((prevPokeArray) =>\r\n      prevPokeArray.filter((pokemon) => {\r\n        if (canEvolve) {\r\n          return pokemon.prev_evolution || pokemon.next_evolution;\r\n        } else {\r\n          return !pokemon.prev_evolution && !pokemon.next_evolution;\r\n        }\r\n      })\r\n    );\r\n  };\r\n  // assigns height of pokemon\r\n  const heightAssign = (minHeight, maxHeight) => {\r\n    setHeight(maxHeight);\r\n    setPokemonData((prevPokeArray) =>\r\n      prevPokeArray.filter((pokemon) => {\r\n        return (\r\n          pokemon.height >= `${minHeight}` && pokemon.height <= `${maxHeight}`\r\n        );\r\n      })\r\n    );\r\n  };\r\n\r\n  // assigns weight of pokemon\r\n  const weightAssign = (minWeight, maxWeight) => {\r\n    setWeight(maxWeight);\r\n    setPokemonData((prevPokeArray) =>\r\n      prevPokeArray.filter((pokemon) => {\r\n        return (\r\n          pokemon.weight >= `${minWeight}` && pokemon.weight <= `${maxWeight}`\r\n        );\r\n      })\r\n    );\r\n  };\r\n  //#endregion\r\n\r\n  //Reset ALL data in states\r\n  function reset() {\r\n    setPokemonData((prevPokeArray) => (prevPokeArray = PokemonLibrary.pokemon));\r\n    setType(null);\r\n    setWeakness(null);\r\n    setEvolve(null);\r\n    setHeight(null);\r\n    setWeight(null);\r\n\r\n    //would need to include all other states that we declared\r\n  }\r\n\r\n  /*   const jumpTo = (step) => {\r\n    setStepNumber(step);\r\n    setPokemonData();\r\n  };\r\n  const renderChoices = () =>\r\n    history.map((_step, move) => {\r\n      const destination = move ? `Go to move #${move}` : \"Go to Start\";\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => jumpTo(move)}>{destination}</button>\r\n        </li>\r\n      );\r\n    });\r\n */\r\n\r\n  //ERROR message and my terrible button. Should be able to delete soon!\r\n  // if (pokemonData.length <= 0) {\r\n  //   return (\r\n  //     <div>\r\n  //       <Button onClick={reset}>There's no more Pokemon! Try again!</Button>\r\n  //     </div>\r\n  //   );\r\n  // }\r\n\r\n  /* CHILD COMPONENT VARIABLES */\r\n\r\n  // Logs all weaknesses to pass to Btn components\r\n  const mapWeaknesses = pokemonData.flatMap((pokeObj) => pokeObj.weaknesses);\r\n  const uniqueWeaknessArray = [...new Set(mapWeaknesses)];\r\n\r\n  //Get all weight and height of all pokemon, sort, and pass variable to weightBtn/heightBtn. If weight/height is within ranges, show button.\r\n  const mapWeight = pokemonData\r\n    .map((pokeObj) => pokeObj.weight)\r\n    .sort((a, b) => a - b);\r\n  const mapHeight = pokemonData\r\n    .map((pokeObj) => pokeObj.height)\r\n    .sort((a, b) => a - b);\r\n\r\n  // Passes to child component to display Yes/No buttons which display if btns are displayed\r\n  const mapEvolutions = pokemonData.map(\r\n    (pokeObj) =>\r\n      Array.isArray(pokeObj.prev_evolution) ||\r\n      Array.isArray(pokeObj.next_evolution)\r\n  );\r\n  // console.log(mapEvolutions);\r\n\r\n  // If only one pokemon is left in the array, just return that pokemon\r\n  if (pokemonData.length === 1) {\r\n    return (\r\n      <div>\r\n        <Stack className={classes.root}>\r\n          <Button variant=\"contained\" onClick={reset}>\r\n            Here's your pokemon\r\n          </Button>\r\n          {pokemonData.map((pokeObj) => (\r\n            <DisplayPokemon key={pokeObj.id} pokeObj={pokeObj} />\r\n          ))}\r\n        </Stack>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //Logging pokemon array each render\r\n  console.log(pokemonData);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Pokemon Selector!</h1>\r\n      <Button variant=\"contained\" color=\"error\" onClick={reset}>\r\n        Reset\r\n      </Button>\r\n      {/* if type hasn't been chosen, show this question - logic is the same for other questions */}\r\n\r\n      {/* Pokemon type? */}\r\n      <Stack className=\"classes.root\">\r\n        {type === null && (\r\n          <div style={{ fontSize: 50 }}>\r\n            <strong> Select Type</strong>{\" \"}\r\n            <TypeButtonsMap\r\n              uniqueWeaknessArray={uniqueWeaknessArray}\r\n              onClick={typeAssign}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {/* Pokemon weakness? */}\r\n        {type !== null && weakness === null && (\r\n          <div style={{ fontSize: 50 }}>\r\n            <strong>Select Weakness</strong>\r\n            <TypeButtonsMap\r\n              uniqueWeaknessArray={uniqueWeaknessArray}\r\n              onClick={weaknessAssign}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {/* Can or can't evolve? */}\r\n        {type !== null && weakness !== null && evolve === null && (\r\n          <div style={{ fontSize: 50 }}>\r\n            <strong>Does your Pokemon evolve?</strong>\r\n            <EvolveBtn mapEvolutions={mapEvolutions} onClick={evolveAssign} />\r\n          </div>\r\n        )}\r\n\r\n        {/* What height? */}\r\n        {type !== null &&\r\n          weakness !== null &&\r\n          evolve !== null &&\r\n          height === null && (\r\n            <div style={{ fontSize: 50 }}>\r\n              <strong>Select Height</strong>\r\n              <HeightBtn mapHeight={mapHeight} onClick={heightAssign} />\r\n            </div>\r\n          )}\r\n\r\n        {/* What weight? */}\r\n        {type !== null &&\r\n          weakness !== null &&\r\n          evolve !== null &&\r\n          height !== null &&\r\n          weight === null && (\r\n            <div style={{ fontSize: 50 }}>\r\n              <strong>Select Weight</strong>\r\n              <WeightBtn mapWeight={mapWeight} onClick={weightAssign} />\r\n            </div>\r\n          )}\r\n\r\n        {/* Result */}\r\n        {type !== null &&\r\n          weakness !== null &&\r\n          evolve !== null &&\r\n          height !== null &&\r\n          weight !== null && (\r\n            <div style={{ fontSize: 55 }}>\r\n              <strong>Here is your Pokemon!</strong>\r\n            </div>\r\n          )}\r\n      </Stack>\r\n      <div className=\"displayPokemon\">\r\n        {pokemonData.map((pokeObj) => (\r\n          <DisplayPokemon key={pokeObj.id} pokeObj={pokeObj} />\r\n        ))}\r\n\r\n        {/* <h3>History</h3>\r\n        {renderChoices()} */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n/* \r\nERROR WITH EVOLVE\r\nEVOLVE IS NOT BEING DEFINED WITH YES OR NO, BUT NO STOPS EVERYTHING, SINCE EVOLVE IS UNDEFINED, IT GETS STUCK ON THE QUESTION\r\nbut why does it only get stuck on 'no'?\r\n\r\nFLYING -> ROCK -> 'NO' and it gets stuck? State is being set but it is not progressing?\r\n\r\n*/\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./App.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}