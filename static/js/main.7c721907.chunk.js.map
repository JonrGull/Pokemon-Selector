{"version":3,"sources":["components/DisplayPokemon.js","components/buttons/HeightBtn.js","components/buttons/WeightBtn.js","components/buttons/TypeButtonsMap.js","App.js","index.js"],"names":["DisplayPokemon","pokeObj","num","name","type","weaknesses","src","img","alt","HeightBtn","onClick","Button","variant","WeightBtn","TypeButtonsMap","uniqueWeaknessArray","mapButtons","map","Stack","spacing","direction","App","useState","PokemonLibrary","pokemon","pokemonData","setPokemonData","Array","fill","setType","weakness","setWeakness","height","setHeight","weight","setWeight","reset","prevPokeArray","length","className","mapWeaknesses","flatMap","Set","console","log","style","fontSize","typeButtonInput","filter","pokeType","includes","minHeight","maxHeight","minWeight","maxWeight","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ix5DAAe,SAASA,EAAT,GAAsC,IAAZC,EAAW,EAAXA,QACvC,OACE,oCACIA,EAAQC,IADZ,MACoBD,EAAQE,KAD5B,MACqCF,EAAQG,KAAK,GADlD,IACuDH,EAAQG,KAAK,GADpE,mBAEgBH,EAAQI,WAEtB,qBAAKC,IAAKL,EAAQM,IAAKC,IAAI,sB,oBCHlB,SAASC,EAAT,GAAiC,IAAZC,EAAW,EAAXA,QAElC,OACE,gCACE,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYF,QAAS,kBAAMA,EAAQ,EAAG,IAAtD,iBAGA,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYF,QAAS,kBAAMA,EAAQ,EAAG,IAAtD,qBAGA,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYF,QAAS,kBAAMA,EAAQ,EAAG,KAAtD,yBCVS,SAASG,EAAT,GAAiC,IAAZH,EAAW,EAAXA,QAClC,OACE,gCACE,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYF,QAAS,kBAAMA,EAAQ,EAAG,IAAtD,mBAGA,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYF,QAAS,kBAAMA,EAAQ,EAAG,KAAtD,wBAGA,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYF,QAAS,kBAAMA,EAAQ,GAAI,MAAvD,sB,YCTS,SAASI,EAAT,GAA2D,IAAjCC,EAAgC,EAAhCA,oBAAqBL,EAAW,EAAXA,QACtDM,EAAaD,EAAoBE,KAAI,SAACb,GAAD,OACzC,cAACO,EAAA,EAAD,CAAmBC,QAAQ,YAAYF,QAAS,kBAAMA,EAAQN,IAA9D,SACGA,GADUA,MAIf,OACE,8BACE,cAACc,EAAA,EAAD,CAAOC,QAAS,EAAGC,UAAU,MAA7B,SACGJ,MCJM,SAASK,IACtB,MAAsCC,mBAASC,EAAeC,SAA9D,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA8BJ,mBAAS,CAACK,MAAM,GAAGC,KAAK,QAAtD,mBACA,GADA,UACoCN,mBAAS,IAA7C,mBACA,GADA,UACwBA,mBAAS,OAAjC,mBAAOlB,EAAP,KAAayB,EAAb,KACA,EAAgCP,mBAAS,MAAzC,mBAAOQ,EAAP,KAAiBC,EAAjB,KACA,EAA4BT,mBAAS,MAArC,mBAAOU,EAAP,KAAeC,EAAf,KACA,EAA4BX,mBAAS,MAArC,mBAAOY,EAAP,KAAeC,EAAf,KAkGA,SAASC,IACPV,GAAe,SAACW,GAAD,OAAoCd,EAAeC,WAClEK,EAAQ,MACRE,EAAY,MACZE,EAAU,MACVE,EAAU,MAKZ,GAAIV,EAAYa,QAAU,EACxB,OACE,qBAAKC,UAAU,YAAf,SACE,wBAAQ7B,QAAS0B,EAAjB,mDAMN,GAA2B,IAAvBX,EAAYa,OACd,OACE,sBAAKC,UAAU,YAAf,UACE,wBAAQ7B,QAAS0B,EAAjB,iCACCX,EAAYR,KAAI,SAAChB,GAAD,OACf,cAACD,EAAD,CAAgBC,QAASA,UAYjC,IAAMuC,EAAgBf,EAAYgB,SAAQ,SAACxC,GAAD,OAAaA,EAAQI,cACzDU,EAAmB,YAAO,IAAI2B,IAAIF,IAGxC,OAFAG,QAAQC,IAAI7B,GAGV,sBAAKwB,UAAU,MAAf,UACE,oDACEnC,GACA,sBAAKyC,MAAO,CAAEC,SAAU,IAAxB,UACE,kDAA8B,IAC9B,cAAChC,EAAD,CACEC,oBAAqBA,EACrBL,QA/IS,SAACqC,GAClBlB,EAAQkB,GACRrB,GAAe,SAACW,GAAD,OACbA,EAAcW,QAAO,SAACC,GACpB,OAAOA,EAAS7C,KAAK8C,SAAd,UAA0BH,gBA+IlC3C,IAAS0B,GACR,sBAAKe,MAAO,CAAEC,SAAU,IAAxB,UACE,qDACA,cAAChC,EAAD,CACEC,oBAAqBA,EACrBL,QA/Ia,SAACqC,GACtBhB,EAAYgB,GACZrB,GAAe,SAACW,GAAD,OACbA,EAAcW,QAAO,SAACC,GACpB,OAAOA,EAAS5C,WAAW6C,SAApB,UAAgCH,gBA+IxC3C,GAAQ0B,IAAaE,GACpB,sBAAKa,MAAO,CAAEC,SAAU,IAAxB,UACE,mDACA,cAACrC,EAAD,CAAWC,QA7IE,SAACyC,EAAWC,GAC/BnB,EAAUmB,GACV1B,GAAe,SAACW,GAAD,OACbA,EAAcW,QAAO,SAACC,GACpB,OACEA,EAASjB,OAAT,UAAqBmB,IAAeF,EAASjB,OAAT,UAAqBoB,eA2I5DhD,GAAQ0B,GAAYE,IAAWE,GAC9B,sBAAKW,MAAO,CAAEC,SAAU,IAAxB,UACE,mDACA,cAACjC,EAAD,CAAWH,QAxIE,SAAC2C,EAAWC,GAC/BnB,EAAUmB,GACV5B,GAAe,SAACW,GAAD,OACbA,EAAcW,QAAO,SAACC,GACpB,OACEA,EAASf,OAAT,UAAqBmB,IAAeJ,EAASf,OAAT,UAAqBoB,eAsI5DlD,GAAQ0B,GAAYE,GAAUE,GAC7B,qBAAKW,MAAO,CAAEC,SAAU,IAAxB,SACE,6DAGJ,sBAAKP,UAAU,iBAAf,UACGd,EAAYR,KAAI,SAAChB,GAAD,OACf,cAACD,EAAD,CAAiCC,QAASA,GAArBA,EAAQsD,OAG/B,wBAAQhB,UAAU,WAAW7B,QAAS0B,EAAtC,yBC/LRoB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7c721907.chunk.js","sourcesContent":["export default function DisplayPokemon({ pokeObj }) {\r\n  return (\r\n    <div>\r\n      #{pokeObj.num} | {pokeObj.name} | {pokeObj.type[0]} {pokeObj.type[1]} |\r\n      Weaknesses - {pokeObj.weaknesses}\r\n      {/* added weaknesses here temporarily just to help narrow it down */}\r\n      <img src={pokeObj.img} alt=\"Pokemon Images\"></img>\r\n    </div>\r\n  );\r\n}\r\n","import { Button } from \"@mui/material\";\r\nimport Stack from \"@mui/material/Stack\";\r\n\r\nexport default function HeightBtn({ onClick }) {\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"contained\" onClick={() => onClick(0, 1)}>\r\n        ~1m\r\n      </Button>\r\n      <Button variant=\"contained\" onClick={() => onClick(1, 3)}>\r\n        1m ~ 3m\r\n      </Button>\r\n      <Button variant=\"contained\" onClick={() => onClick(3, 10)}>\r\n        3m ~ 10m\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","import { Button } from \"@mui/material\";\r\nimport Stack from \"@mui/material/Stack\";\r\n\r\nexport default function WeightBtn({ onClick }) {\r\n  return (\r\n    <div>\r\n      <Button variant=\"contained\" onClick={() => onClick(0, 5)}>\r\n        ~ 5kg\r\n      </Button>\r\n      <Button variant=\"contained\" onClick={() => onClick(5, 25)}>\r\n        5kg ~ 25gk\r\n      </Button>\r\n      <Button variant=\"contained\" onClick={() => onClick(25, 500)}>\r\n        25kg+\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","import { Button } from \"@mui/material\";\r\nimport Stack from \"@mui/material/Stack\";\r\n\r\nexport default function TypeButtonsMap({ uniqueWeaknessArray, onClick }) {\r\n  const mapButtons = uniqueWeaknessArray.map((type) => (\r\n    <Button key={type} variant=\"contained\" onClick={() => onClick(type)}>\r\n      {type}\r\n    </Button>\r\n  ));\r\n  return (\r\n    <div>\r\n      <Stack spacing={2} direction=\"row\">\r\n        {mapButtons}\r\n      </Stack>\r\n    </div>\r\n  );\r\n}\r\n<p></p>;\r\n","import React, { useState } from \"react\";\r\nimport DisplayPokemon from \"./components/DisplayPokemon\";\r\nimport \"./App.css\";\r\nimport PokemonLibrary from \"./data/PokemonList.json\";\r\nimport HeightBtn from \"./components/buttons/HeightBtn\";\r\nimport WeightBtn from \"./components/buttons/WeightBtn\";\r\nimport TypeButtonsMap from \"./components/buttons/TypeButtonsMap\";\r\n\r\nexport default function App() {\r\n  const [pokemonData, setPokemonData] = useState(PokemonLibrary.pokemon); //The giant array of pokemon with pokemon nested in individual obj\r\n  const [history, setHistory] = useState([Array(4).fill(null)]); //4 for 4 questions. Will need up increase this number if add more questions. Holds our choices?\r\n  const [stepNumber, setStepNumber] = useState(0); // will show question state buttons\r\n  const [type, setType] = useState(null);\r\n  const [weakness, setWeakness] = useState(null);\r\n  const [height, setHeight] = useState(null);\r\n  const [weight, setWeight] = useState(null);\r\n\r\n  // assigns type of pokemon\r\n  const typeAssign = (typeButtonInput) => {\r\n    setType(typeButtonInput);\r\n    setPokemonData((prevPokeArray) =>\r\n      prevPokeArray.filter((pokeType) => {\r\n        return pokeType.type.includes(`${typeButtonInput}`);\r\n      })\r\n    );\r\n  };\r\n\r\n  const weaknessAssign = (typeButtonInput) => {\r\n    setWeakness(typeButtonInput);\r\n    setPokemonData((prevPokeArray) =>\r\n      prevPokeArray.filter((pokeType) => {\r\n        return pokeType.weaknesses.includes(`${typeButtonInput}`);\r\n      })\r\n    );\r\n  };\r\n\r\n  const heightAssign = (minHeight, maxHeight) => {\r\n    setHeight(maxHeight);\r\n    setPokemonData((prevPokeArray) =>\r\n      prevPokeArray.filter((pokeType) => {\r\n        return (\r\n          pokeType.height > `${minHeight}` && pokeType.height < `${maxHeight}`\r\n        );\r\n      })\r\n    );\r\n  };\r\n\r\n  const weightAssign = (minWeight, maxWeight) => {\r\n    setWeight(maxWeight);\r\n    setPokemonData((prevPokeArray) =>\r\n      prevPokeArray.filter((pokeType) => {\r\n        return (\r\n          pokeType.weight > `${minWeight}` && pokeType.weight < `${maxWeight}`\r\n        );\r\n      })\r\n    );\r\n  };\r\n\r\n  /*   const jumpTo = (step) => {\r\n    setStepNumber(step);\r\n    setPokemonData();\r\n  };\r\n  const renderChoices = () =>\r\n    history.map((_step, move) => {\r\n      const destination = move ? `Go to move #${move}` : \"Go to Start\";\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => jumpTo(move)}>{destination}</button>\r\n        </li>\r\n      );\r\n    });\r\n */\r\n  //   const canEvolveAssign = () => {\r\n  //   setWeight(maxWeight);\r\n  //   setPokemonData((prevPokeArray) =>\r\n  //     prevPokeArray.filter((pokeType) => {\r\n  //       return (\r\n  //         pokeType.weight > `${minWeight}` && pokeType.weight < `${maxWeight}`\r\n  //       );\r\n  //     })\r\n  //   );\r\n  // };\r\n\r\n  /* \r\nPut each question inside its own separate component that App pulls from to render each group of buttons and functions????\r\n*/\r\n\r\n  // const [languageState, SetLanguageState] = useState();\r\n\r\n  /* React.useEffect(() => { //still works without this, so let's remove it for now.\r\n    setPokemonData(PokemonLibrary.pokemon);\r\n  }, []); */\r\n\r\n  /* \r\nPut all these functions in useEffect?\r\n*/\r\n\r\n  // I believe this all works, unsure if we can use it tho?\r\n  /*   const { typeArray = pokemonData.map((getType) => getType.type) } =\r\n    pokemonData;\r\n  // console.log(typeArray);\r\n\r\n  // .map((ele) => ele) } = pokemonData;\r\n  const filterTypeOne = (typeButtonInput) => {\r\n    // can i use array destructuring here?\r\n    setPokemonData((prevPokeArray) =>\r\n      prevPokeArray.filter(() => {\r\n        return typeArray.includes(`${typeButtonInput}`);\r\n      })\r\n    );\r\n  }; */\r\n\r\n  //Reset ALL data in states\r\n  function reset() {\r\n    setPokemonData((prevPokeArray) => (prevPokeArray = PokemonLibrary.pokemon));\r\n    setType(null);\r\n    setWeakness(null);\r\n    setHeight(null);\r\n    setWeight(null);\r\n    //would need to include all other states that we declared\r\n  }\r\n\r\n  //Error message and my terrible button.\r\n  if (pokemonData.length <= 0) {\r\n    return (\r\n      <div className=\"error-box\">\r\n        <button onClick={reset}>There's no more Pokemon! Try again!</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // if only one pokemon is left in the array, just return that pokemon\r\n  if (pokemonData.length === 1) {\r\n    return (\r\n      <div className=\"error-box\">\r\n        <button onClick={reset}>Here's your pokemon</button>\r\n        {pokemonData.map((pokeObj) => (\r\n          <DisplayPokemon pokeObj={pokeObj} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //logging array each button press\r\n  // console.log(pokemonData);\r\n\r\n  // Loop that logs all weaknesses\r\n  // Can I apply this to height/weight as well? Remove buttons that don't fit within a range?\r\n\r\n  const mapWeaknesses = pokemonData.flatMap((pokeObj) => pokeObj.weaknesses);\r\n  const uniqueWeaknessArray = [...new Set(mapWeaknesses)];\r\n  console.log(uniqueWeaknessArray);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Pokemon Selector!</h1>\r\n      {!type && (\r\n        <div style={{ fontSize: 50 }}>\r\n          <strong> Select Type</strong>{\" \"}\r\n          <TypeButtonsMap\r\n            uniqueWeaknessArray={uniqueWeaknessArray}\r\n            onClick={typeAssign}\r\n          />\r\n        </div>\r\n      )}\r\n      {type && !weakness && (\r\n        <div style={{ fontSize: 50 }}>\r\n          <strong>Select Weakness</strong>\r\n          <TypeButtonsMap\r\n            uniqueWeaknessArray={uniqueWeaknessArray}\r\n            onClick={weaknessAssign}\r\n          />\r\n        </div>\r\n      )}\r\n      {type && weakness && !height && (\r\n        <div style={{ fontSize: 50 }}>\r\n          <strong>Select Height</strong>\r\n          <HeightBtn onClick={heightAssign} />\r\n        </div>\r\n      )}\r\n      {type && weakness && height && !weight && (\r\n        <div style={{ fontSize: 50 }}>\r\n          <strong>Select Weight</strong>\r\n          <WeightBtn onClick={weightAssign} />\r\n        </div>\r\n      )}\r\n      {type && weakness && height && weight && (\r\n        <div style={{ fontSize: 55 }}>\r\n          <strong>Here is your Pokemon!</strong>\r\n        </div>\r\n      )}\r\n      <div className=\"displayPokemon\">\r\n        {pokemonData.map((pokeObj) => (\r\n          <DisplayPokemon key={pokeObj.id} pokeObj={pokeObj} />\r\n        ))}\r\n\r\n        <button className=\"resetBtn\" onClick={reset}>\r\n          Reset\r\n        </button>\r\n        {/* <h3>History</h3>\r\n        {renderChoices()} */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n/* \r\nMove questions into app.js for now? \r\n\r\n        {pokemonMapper().map((pokeObj) => (\r\n          <DisplayPokemon pokeObj={pokeObj} />\r\n        ))}\r\n\r\n*/\r\n\r\n// function pokemonMapper() {\r\n//   //Set to base data\r\n//   //check each flag\r\n//   let newPokemonArray = pokemonData;\r\n//   if (flyingFilter) {\r\n//     newPokemonArray = newPokemonArray.filter((f) => {\r\n//       if (f.type.includes(\"flying\")) {\r\n//         return true;\r\n//       }\r\n//     });\r\n//   }\r\n//   if (fireFilter) {\r\n//     newPokemonArray = newPokemonArray.filter((f) => {\r\n//       if (f.type.includes(\"fire\")) {\r\n//         return true;\r\n//       }\r\n//     });\r\n//   }\r\n\r\n//   return newPokemonArray;\r\n// }\r\n\r\n/* \r\n\r\nFor weight and height. We need to say \r\nif no pokemon are under 1m or over 3m, then don't show those buttons?\r\n*/\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./App.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}